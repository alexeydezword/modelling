import urllib.request
import math
import os
import scipy.special as scp
import json
import matplotlib.pyplot as plt
import xml.etree.ElementTree as ET
if __name__ == '__main__':
    class Rcs:
        def __init__(self,r,fmin,fmax):
            self.r=r
            self.fmin=fmin
            self.fmax=fmax
            self.mass_f=[]
            self.mass_rcs=[]
        def calc(self):
            f=fmin
            def hn(n,x):
                return complex(scp.spherical_jn(n,x),scp.spherical_yn(n,x))
            while f<=fmax:
                l=3*10**8/f
                k=2*math.pi/l
                s=0
                for n in range(1,20): 
                   an=scp.spherical_jn(n,k*r)/hn(n,k*r)
                   bn=(k*r*scp.spherical_jn(n-1,k*r)-n*scp.spherical_jn(n,k*r))/(k*r*hn(n-1,k*r)-n*hn(n,k*r))
                   s+=((-1)**n)*(n+0.5)*(bn-an)
                self.mass_f.append(f)
                self.mass_rcs.append((l**2)*((abs(s))**2)/math.pi)
                f+=100000000
            plt.plot(self.mass_f,self.mass_rcs)
            plt.xlabel("f, Гц")
            plt.ylabel("ЭПР, м^2")
            plt.show()
    class Output:
        def __init__(self,mass_f,mass_rcs):
            self.mass_f=mass_f
            self.mass_rcs=mass_rcs
        def output(self):
            # создание директории
            if not os.path.isdir("results"):
                os.mkdir("results")
            os.chdir("results")

            data = {
            "freq": self.mass_f,
            "lambda": [3 * 10**8 / f for f in self.mass_f],
            "rcs": self.mass_rcs
}

            # запись в JSON файл
            with open('result.json', 'w') as f:
                json.dump(data, f, indent=4)
    url='https://jenyay.net/uploads/Student/Modelling/task_rcs_01.xml'
    urllib.request.urlretrieve(url,"input.xml")

    
    tree = ET.parse('input.xml')
    root = tree.getroot()

    # Поиск данных для варианта 3
    variant_number = "3"
    for variant in root.findall('variant'):
        if variant.get('number') == variant_number:
            D = float(variant.get('D'))
            fmin = float(variant.get('fmin'))
            fmax = float(variant.get('fmax'))
            break
    r=D/2

    sph=Rcs(r,fmin,fmax)
    sph.calc()
    o=Output(sph.mass_f,sph.mass_rcs)
    o.output()



